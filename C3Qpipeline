#!/usr/bin/env python3

import argparse
import sys
import os
import subprocess
import shutil
from datetime import datetime
import inspect

def line_track():
	return inspect.currentframe().f_back.f_lineno

def error_handler(error,pattern,linetrack):
	shutil.copy("error_log.txt","../error_log_"+pattern+".txt")
	os.chdir("../")
	shutil.rmtree("temp_dir_"+pattern)
	command = " ".join(error.cmd)
	sys.exit("Failed to execute {0} on line {1}.\nCheck the error log file for more details.\nCommand: {2}".format(error.cmd[0], linetrack, command))


def input_args():
	parse = argparse.ArgumentParser(usage = "C3Qpipeline [OPTIONS]",add_help = False)
	parse._action_groups.pop()
	required = parse.add_argument_group("Required arguments")
	optional = parse.add_argument_group("Optional arguments")
	required.add_argument("-genome", help = "Genome file in FASTA format.", required = True, metavar = "<file.fna>")
	required.add_argument("-libs", help = "List of RNA-seq libraries as specified in READ ME.", required = True, metavar = "<libs.txt>")
	required.add_argument("-strandness", help = """Strandess of the RNA-seq library. Must be either "yes" (stranded), "no" (unstranded) or "reverse" (reversely stranded).""", required = True, choices=["yes","no","reverse"] , metavar = "<yes/no/reverse>")
	optional.add_argument("--sublibs", help = "List of sub-sampled libraries as specified in READ ME.", required = False, metavar = "<sublibs.txt>") 
	optional.add_argument("--exo", help = "Protein fasta file for exonerate guidance.", required = False, metavar = "<file.faa>")
	optional.add_argument("--refine-exo", help = "Sets exonerate to refine its alignments. This is very memory and time consuming.", required = False, action = "store_true")
	optional.add_argument("--o", help = "Output name.", required = False, metavar = "<name>")
	optional.add_argument("--p",help="Number of cpu cores to be used. Default: 1", required = False, default = "1", metavar = "<number>")
	optional.add_argument("-h","--help",help="Show this help message.", action='help')

	args = parse.parse_args()
	return(args)

def cufflinks(file_list,p,pattern):
	print("Executing Cufflinks")
	n= 0
	nlist = []
	with open(file_list, "r") as file:
		for line in file:
			if not line.strip():
				pass
			else:
				n += 1
				nlist.append(str(n))
				lib = line.strip()
				try:
					with open("error_log.txt","w") as error_log:
						subprocess.check_call(["cufflinks", "-o",str(n),"-p",str(p), "--max-intron-length", "4000", "--min-intron-length", "30", "--min-isoform-fraction", "0.9", "--pre-mrna-fraction", "0.85", "--overlap-radius", "1", "--trim-3-avgcov-thresh", "0", "--trim-3-dropoff-frac", "0.0", "--small-anchor-fraction", "0.0", lib], stderr=error_log,stdout=subprocess.DEVNULL)
				except subprocess.CalledProcessError as error:
					linetrack = line_track()-2
					error_handler(error,pattern,linetrack)
	return(nlist)

def cuffmerge(nlist,pattern,p):
	with open("list_cuffmerge.txt","w") as cufffile:
		for i in nlist:
			print(os.getcwd()+"/"+i+"/transcripts.gtf", file= cufffile)
	print("Executing Cuffmerge")
	try:
		with open("error_log.txt","w") as error_log:
			subprocess.check_call(["cuffmerge","-p",str(p),"-o","cuffmerge","list_cuffmerge.txt"],stderr=error_log,stdout=subprocess.DEVNULL)
	except subprocess.CalledProcessError as error:
		linetrack = line_track()-2
		error_handler(error,pattern,linetrack)

def gffread(infile,outfile,pattern):
	print("Executing Gffread")
	try:
		with open("error_log.txt","w") as error_log:
			subprocess.check_call(["gffread",infile,"-o",outfile],stderr=error_log,stdout=subprocess.DEVNULL)
	except subprocess.CalledProcessError as error:
		linetrack = line_track()-2
		error_handler(error,pattern,linetrack)

def codingquarry(pattern, p):
	print("Executing CodingQuarry")
	try:
		with open("error_log.txt","w") as error_log:
			subprocess.check_call(["CodingQuarry","-p",str(p),"-t","merged.gff3","-f","genome.fna"],stderr=error_log,stdout=subprocess.DEVNULL)
	except subprocess.CalledProcessError as error:
		linetrack = line_track()-2
		error_handler(error,pattern,linetrack)
	with open("out/PredictedPass.gff3","r") as cdqfile, open("CorrectedPredictedPass.gff3","w") as newgff:
		for line in cdqfile:
			line = line.replace("Name=;","").strip()
			print(line,file=newgff)

def gffcompare(filelist,outname,pattern):
	print("Executing GFFcompare")
	try:
		with open("error_log.txt","w") as error_log:
			subprocess.check_call("gffcompare"+" -r "+filelist+" -o "+outname,shell=True,stderr=error_log,stdout=subprocess.DEVNULL)
	except subprocess.CalledProcessError as error:
		linetrack = line_track()-2
		error_handler(error,pattern,linetrack)

def small_seq_filter():
	print("Executing small sequences filter")
	filter_list = []
	with open("ref.CorrectedPredictedPass.gff3.tmap","r") as infile:
		for line in infile:
			line = line.strip().split()
			if line[0] == "ref_gene_id":
				pass
			elif int(line[5]) > 1:
				if int(line[11]) > 150:
					filter_list.append(line[0])
				else:
					pass
			elif int(line[5]) == 1:
				if int(line[11]) > 300:
					filter_list.append(line[0])
				else:
					pass
			else:
				pass
	with open("CorrectedPredictedPass.gff3","r") as oldgff, open("PredictedPass_seq-filter.gff3", "w") as newgff:
		for line in oldgff:
			for item in filter_list:
				if item in line:
					print(line.strip(), file=newgff)
				else:
					pass

def htseq(libfile,strandness,pattern):
	print("Executing HTseq-count")
	libraries = ""
	with open(libfile, "r") as liblist:
		for line in liblist:
			if libraries == "":
				libraries = libraries+line.strip()
			else:
				libraries = libraries+" "+line.strip()
	try:
		with open("error_log.txt","w") as error_log:
			subprocess.check_call("htseq-count -s "+strandness+" -f bam -r pos -t CDS -i ID "+libraries+" PredictedPass_seq-filter.gff3 > htseq_out.txt",shell=True,stderr=error_log,stdout=subprocess.DEVNULL)
	except subprocess.CalledProcessError as error:
		linetrack = line_track()-2
		error_handler(error,pattern,linetrack)

def read_count_filter():
	print("Filtering genes with no reads")
	list_pass = []
	with open("htseq_out.txt", "r") as htin:
		for line in htin:
			line = line.strip().split()
			if "TCONS" in line[0]:
				list_pass.append(line[0].replace("CDS:",""))
			else:
				num_reads = 0
				for value in range(1,len(line)):
					num_reads += int(line[value])
				if num_reads == 0:
					pass
				else:
					list_pass.append(line[0].replace("CDS:",""))
	with open("PredictedPass_seq-filter.gff3","r") as gffin, open("PredictedPass_seq-filter-2.gff3", "w") as gffout:
		for line in gffin:
			for item in list_pass:
				if item in line:
					print(line.strip(), file=gffout)
				else:
					pass

def gene_model_selection():
	print("Selecting best gene models")
	dicloci = {}
	IDlist = []
	with open("compare_seq-filter.tracking","r") as inputfile:
		for line in inputfile:
			line = line.strip().replace("|","	")
			if line.split()[1] not in dicloci:
				dicloci[line.split()[1]] = line
			else:
				if "TCONS" in dicloci[line.split()[1]].split()[2]:
					if "TCONS" in line.split()[2]:
						if int(dicloci[line.split()[1]].split()[11]) >= int(line.split()[11]):
							pass
						else:
							dicloci[line.split()[1]] = line
					else:
						pass
				else:
					if "TCONS" in line.split()[2]:
						dicloci[line.split()[1]] = line
					else:
						if int(dicloci[line.split()[1]].split()[11]) >= int(line.split()[11]):
							pass
						else:
							dicloci[line.split()[1]] = line
	for item in dicloci:
		IDlist.append(dicloci[item].split()[2])
	with open("PredictedPass_seq-filter-2.gff3", "r") as gffin, open("PredictedPass_multifiltered.gff3", "w") as gffout:
		for line in gffin:
			for item in IDlist:
				if item in line:
					print(line.strip(), file=gffout)
				else:
					pass

def exonerate(refine_exo):
	print("Executing Exonerate")
	try:
		with open("error_log.txt","w") as error_log:
			if refine_exo is True:
				subprocess.check_call("exonerate --model protein2genome --query guide_proteins.fa --target genome.fna --gff3 true --showalignment false --showvulgar false --percent 30 --showtargetgff true --bestn 1 --maxintron 4000 --subopt false --refine region > exonerate_out.gff",shell=True,stderr=error_log,stdout=subprocess.DEVNULL)
			else:
				subprocess.check_call("exonerate --model protein2genome --query guide_proteins.fa --target genome.fna --gff3 true --showalignment false --showvulgar false --percent 30 --showtargetgff true --bestn 1 --maxintron 4000 --subopt false > exonerate_out.gff",shell=True,stderr=error_log,stdout=subprocess.DEVNULL)
	except subprocess.CalledProcessError as error:
		linetrack = line_track()-2
		error_handler(error,pattern,linetrack)
	with open("exonerate_out.gff", "r") as gffin, open("exonerate.gff", "w") as gffout:
		for line in gffin:
			if not line.strip():
				pass
			elif len(line.strip().split("\t")) < 3:
				pass
			else:
				line = line.strip().split("\t")
				if line[2] == "match":
					line[2] = "gene"
				elif line[2] == "match_part":
					line[2] = "CDS"
				else:
					pass
				print("\t".join(line), file=gffout)

def create_output():
	print("Generating final GFF file")
	genelist = []
	with open("EXO_compare.loci", "r") as infile:
		for line in infile:
			line = line.strip().split()
			if line[3] == "-" and line[4] != "-":
				genelist.append(line[4])
	with open("PredictedPass_multifiltered.gff3","r") as predgff ,open("exonerate.gff3","r") as exogff, open("Final_annotation.gff3", "w") as finalgff:
		for line in predgff:
			if not line.strip():
				pass
			else:
				print(line.strip(), file=finalgff)
		for line in exogff:
			for item in genelist:
				if item in line:
					print(line.strip(), file=finalgff)
				else:
					pass

def main():
	print("C3Q pipeline version 1.0 (September 2020)")
	initdir = os.getcwd()
	inputargs = input_args()
	if inputargs.o is None:
		pattern = datetime.now().strftime("%b-%d-%Y_%Hh-%Mm-%Ss")
	else:
		pattern = inputargs.o
	os.mkdir("temp_dir_"+pattern)
	shutil.copy(inputargs.genome,"temp_dir_"+pattern+"/genome.fna")
	shutil.copy(inputargs.libs,"temp_dir_"+pattern+"/libs.txt")
	if inputargs.sublibs is None:
		pass
	else:
		shutil.copy(inputargs.sublibs,"temp_dir_"+pattern+"/sublibs.txt")
	if inputargs.exo is None:
		pass
	else:
		shutil.copy(inputargs.exo, "temp_dir_"+pattern+"/guide_proteins.fa")
	os.chdir("temp_dir_"+pattern)
	if inputargs.sublibs is None:
		nlist = cufflinks("libs.txt",inputargs.p,pattern)
	else:
		nlist = cufflinks("sublibs.txt",inputargs.p,pattern)
	cuffmerge(nlist,pattern,inputargs.p)
	gffread("cuffmerge/merged.gtf","merged.gff3",pattern)
	codingquarry(pattern,inputargs.p)
	gffcompare("CorrectedPredictedPass.gff3 CorrectedPredictedPass.gff3","ref",pattern)
	small_seq_filter()
	htseq("libs.txt",inputargs.strandness,pattern)
	read_count_filter()
	gffcompare("PredictedPass_seq-filter-2.gff3 PredictedPass_seq-filter-2.gff3","compare_seq-filter",pattern)
	gene_model_selection()
	if inputargs.exo is None:
		shutil.copy("PredictedPass_multifiltered.gff3","../Genome_annotation_"+pattern+".gff3")
	else:
		exonerate(inputargs.refine_exo)
		gffread("exonerate.gff","exonerate.gff3",pattern)
		gffcompare("CorrectedPredictedPass.gff3 PredictedPass_multifiltered.gff3 exonerate.gff3","EXO_compare",pattern)
		create_output()
		shutil.copy("Final_annotation.gff3","../Genome_annotation_"+pattern+".gff3")
	os.chdir("../")
	shutil.rmtree("temp_dir_"+pattern)

if __name__ == "__main__":
	main()
